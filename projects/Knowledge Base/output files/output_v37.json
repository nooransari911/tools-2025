[
            {
                "file": "../AI_doc_processor_webapp/backend/app/main.py",
                "content": "# ai_doc_processor_webapp/backend/app/main.py\nimport os\nimport sys\nimport pathlib\nimport logging\nfrom typing import Optional, List # Import List\n\n# Third-party imports\nfrom fastapi import FastAPI, File, UploadFile, Form, HTTPException, Depends\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom dotenv import load_dotenv\n\n# --- Setup logging ---\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\")\nmain_logger = logging.getLogger(\"api_main\")\n\n# --- Path setup and sys.path modification ---\ntry:\n\tbackend_dir = pathlib.Path(__file__).resolve().parent.parent\n\twebapp_root = backend_dir.parent\n\toriginal_project_root = webapp_root.parent / \"Knowledge Base\" # ** ADJUST IF NEEDED **\n\tmain_logger.info(f\"Original project root: {original_project_root}\")\n\tif not original_project_root.is_dir(): main_logger.warning(\"Original project root not found!\")\n\toriginal_project_root_str = str(original_project_root)\n\tif original_project_root_str not in sys.path:\n\t\tsys.path.insert(0, original_project_root_str)\n\t\tmain_logger.info(f\"Added to sys.path: {original_project_root_str}\")\nexcept Exception as path_e: main_logger.critical(f\"Path error: {path_e}\", exc_info=True); sys.exit(1)\n\n# --- Load .env ---\ndotenv_path = backend_dir / \".env\"\nif dotenv_path.is_file(): load_dotenv(dotenv_path=dotenv_path, override=True); main_logger.info(f\"Loaded .env: {dotenv_path}\")\nelse: main_logger.warning(f\"Backend .env not found: {dotenv_path}\")\n\n# --- Imports ---\ntry:\n\tfrom src.utils import gemini_utils\n\t# ** NOTE: ProcessForm is still imported but no longer used via Depends() in the endpoint **\n\tfrom .schemas.api_models import ProcessResponse, SchemaListResponse, ProcessForm\n\tfrom .core.processor import process_document_web_multi # Import new multi processor\n\tmain_logger.info(\"Imports successful.\")\nexcept ImportError as e: main_logger.critical(f\"Import failed: {e}\", exc_info=True); sys.exit(1)\nexcept Exception as import_e: main_logger.critical(f\"Unexpected Import Error: {import_e}\", exc_info=True); sys.exit(1)\n\n# --- FastAPI App & CORS ---\napp = FastAPI(title=\"AI Document Processor API\", version=\"1.7.1 MULTI-FIX\") # Version bump\nfrontend_origin = os.getenv(\"FRONTEND_ORIGIN\", \"http://localhost:3000\")\napp.add_middleware(CORSMiddleware, allow_origins=[frontend_origin], allow_credentials=True, allow_methods=[\"*\"], allow_headers=[\"*\"])\nmain_logger.info(f\"CORS for: {frontend_origin}\")\n\n# --- API Endpoints ---\n\n@app.get(\"/api/schemas\", response_model=SchemaListResponse, summary=\"Get Schemas\")\nasync def get_available_schemas():\n\t\"\"\"Retrieves the list of registered schema names.\"\"\"\n\ttry:\n\t\tschema_names = list(gemini_utils.SCHEMA_REGISTRY.keys()); schema_names.insert(0, \"(No Schema - Plain Text)\")\n\t\treturn SchemaListResponse(schemas=schema_names)\n\texcept Exception as e: main_logger.error(f\"Schema registry error: {e}\", exc_info=True); raise HTTPException(status_code=500, detail=\"Schema load error.\")\n\n# --- REWRITTEN /api/process endpoint for MULTIPLE FILES (Using explicit Form fields) --- \n@app.post(\"/api/process\", response_model=ProcessResponse, summary=\"Process Uploaded Documents\")\nasync def process_files_endpoint(\n\t# ** Expect a LIST of files under the key 'files' **\n\tfiles: List[UploadFile] = File(..., description=\"One or more document files to process.\"),\n\t# ** Explicitly define form fields using Form() instead of Depends() **\n\tprompt: str = Form(..., description=\"Instructions for processing.\"),\n\tschema_name: str = Form(..., description=\"Schema name or '(No Schema - Plain Text)'.\"),\n\tmodel_type: str = Form(..., description=\"Model type ('pro' or 'flash').\"),\n\tapi_key_type: str = Form(..., description=\"API key type ('free' or 'paid').\")\n):\n\t\"\"\"Handles multiple file uploads and triggers batch processing.\"\"\"\n\tmain_logger.info(f\"Processing request for {len(files)} file(s): schema='{schema_name}', model='{model_type}', key='{api_key_type}'\")\n\t\n\tif not files:\n\t\t raise HTTPException(status_code=400, detail=\"No files were uploaded.\")\n\n\t# --- Manually create the ProcessForm object --- \n\t# This is needed because the processor function expects it.\n\ttry:\n\t\tform_data_obj = ProcessForm(\n\t\t\tprompt=prompt,\n\t\t\tschema_name=schema_name,\n\t\t\tmodel_type=model_type,\n\t\t\tapi_key_type=api_key_type\n\t\t)\n\texcept Exception as pydantic_e: # Catch potential validation errors during manual creation\n\t\tmain_logger.error(f\"Pydantic validation error for form fields: {pydantic_e}\", exc_info=False)\n\t\traise HTTPException(status_code=422, detail=f\"Invalid form field data: {pydantic_e}\")\n\n\tfiles_data_to_process = []\n\tprocessed_filenames = set()\n\n\ttry:\n\t\t# --- Read all files first --- \n\t\tfor file in files:\n\t\t\tif not file.filename:\n\t\t\t\tmain_logger.warning(\"Skipping upload with no filename.\")\n\t\t\t\tcontinue # Skip files without names\n\t\t\t# Prevent duplicate filenames in the same request if needed\n\t\t\tif file.filename in processed_filenames:\n\t\t\t\tmain_logger.warning(f\"Duplicate filename '{file.filename}' in request, skipping second instance.\")\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tcontent = await file.read()\n\t\t\tif not content:\n\t\t\t\tmain_logger.warning(f\"Skipping empty file: {file.filename}\")\n\t\t\t\tcontinue # Skip empty files\n\t\t\t\n\t\t\tfiles_data_to_process.append((file.filename, content, file.content_type or 'application/octet-stream'))\n\t\t\tprocessed_filenames.add(file.filename)\n\t\t\tawait file.close() # Close file after reading\n\t\t\n\t\tif not files_data_to_process:\n\t\t\t raise HTTPException(status_code=400, detail=\"No valid files found to process after initial checks.\")\n\n\t\tmain_logger.info(f\"Prepared {len(files_data_to_process)} files for processing.\")\n\n\t\t# --- Call Core Logic for MULTIPLE files --- \n\t\tresult_data = await process_document_web_multi(\n\t\t\tfiles_data=files_data_to_process,\n\t\t\tform_data=form_data_obj # Pass the manually created form data model\n\t\t)\n\t\tmain_logger.info(f\"Multi-file processor completed with status: {result_data.get('status')}\")\n\t\treturn ProcessResponse(**result_data)\n\n\texcept HTTPException as http_exc:\n\t\tmain_logger.warning(f\"HTTPException: {http_exc.status_code} - {http_exc.detail}\")\n\t\traise http_exc # Re-raise validation/early errors\n\texcept Exception as e:\n\t\tmain_logger.error(f\"!!! UNEXPECTED Endpoint Error: {type(e).__name__}: {e}\", exc_info=True)\n\t\t# Return a structured error response even for unexpected errors\n\t\treturn ProcessResponse(\n\t\t\tstatus=\"error\",\n\t\t\toverall_error_message=f\"Internal Server Error: {type(e).__name__}\",\n\t\t\tresults=[]\n\t\t)\n\n\n# --- Health Check & Root Endpoints ---\n@app.get(\"/api/health\", summary=\"Health Check\")\nasync def health_check(): return {\"status\": \"ok\"}\n@app.get(\"/\", summary=\"API Root\")\nasync def read_root(): return {\"message\": \"API running\"}\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/App.js",
                "content": "import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport { fetchSchemas, processDocument } from './services/api';\nimport ResultsPage from './components/ResultsPage';\nimport './index.css';\n\n// Uppy imports\nimport Uppy from '@uppy/core';\nimport { DragDrop } from '@uppy/react';\n\nfunction App() {\n\treturn (\n\t\t<Routes>\n\t\t\t<Route path=\"/\" element={<MainForm />} />\n\t\t\t<Route path=\"/results\" element={<ResultsPage />} />\n\t\t</Routes>\n\t);\n}\n\n// --- Main Form Component ---\nfunction MainForm() {\n\tconst navigate = useNavigate();\n\n\t// State variables\n\tconst [prompt, setPrompt] = useState('');\n\tconst [schemas, setSchemas] = useState([]);\n\tconst [selectedSchema, setSelectedSchema] = useState('');\n\tconst [selectedModel, setSelectedModel] = useState('flash');\n\tconst [selectedApiKeyType, setSelectedApiKeyType] = useState('paid');\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n    const [fileCount, setFileCount] = useState(0);\n\n\t// UseRef for Uppy instance\n    const uppyRef = useRef(null);\n    if (!uppyRef.current) {\n        uppyRef.current = new Uppy({\n            autoProceed: false,\n            debug: false, // Keep false unless debugging uppy\n            restrictions: { },\n            allowMultipleUploadBatches: true,\n        });\n        console.log(\"Uppy instance created.\");\n    }\n\n    // Update file count when Uppy's file list changes\n    useEffect(() => {\n        const uppy = uppyRef.current;\n        if (!uppy) return;\n\n        const updateCounter = () => {\n            setFileCount(uppy.getFiles().length);\n        };\n\n        uppy.on('file-added', updateCounter);\n        uppy.on('file-removed', updateCounter);\n        uppy.on('restored', updateCounter);\n        uppy.on('reset', updateCounter);\n\n        updateCounter(); // Initial count\n\n        // Cleanup listeners\n        return () => {\n            // Only remove listeners if uppy instance still exists\n            if (uppyRef.current) {\n                 console.log(\"Cleaning up Uppy listeners...\");\n                 uppyRef.current.off('file-added', updateCounter);\n                 uppyRef.current.off('file-removed', updateCounter);\n                 uppyRef.current.off('restored', updateCounter);\n                 uppyRef.current.off('reset', updateCounter);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // Run only once on mount\n\n    // Close Uppy instance on unmount\n    useEffect(() => {\n        const uppyInstance = uppyRef.current; // Capture instance for cleanup\n        // Return the cleanup function\n        return () => {\n            if (uppyInstance) {\n                console.log(\"Closing Uppy instance...\");\n                try {\n                    uppyInstance.close({ reason: 'unmount' });\n                    // ** REMOVED uppyRef.current = null; **\n                } catch (closeError) {\n                    // Log error if closing fails, but don't crash\n                    console.error(\"Error closing Uppy instance:\", closeError);\n                }\n            }\n        };\n    }, []); // Run only once on unmount\n\n\n\t// Fetch schemas on mount (no changes)\n\tconst loadSchemas = useCallback(async () => {\n        // ... (same fetch logic as before)\n\t\ttry {\n\t\t\tconst schemaList = await fetchSchemas();\n\t\t\tsetSchemas(schemaList || []);\n\t\t\tif (schemaList && schemaList.length > 0) {\n\t\t\t\t// Set default selected schema only if it's not already set or invalid\n                // Ensure '(No Schema - Plain Text)' is handled if present\n                const defaultSchema = schemaList.includes('(No Schema - Plain Text)') \n                                      ? '(No Schema - Plain Text)' \n                                      : schemaList[0];\n\t\t\t\tif (!selectedSchema || !schemaList.includes(selectedSchema)) {\n\t\t\t\t\tsetSelectedSchema(defaultSchema);\n\t\t\t\t}\n\t\t\t} else {\n                // If no schemas fetched, explicitly set to the plain text option\n                setSelectedSchema('(No Schema - Plain Text)');\n            }\n\t\t} catch (err) {\n\t\t\tsetError(`Failed to load schemas: ${err.message}`);\n\t\t\tsetSchemas([]);\n            setSelectedSchema('(No Schema - Plain Text)'); // Fallback on error\n\t\t}\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []); // Removed selectedSchema from dependencies to prevent loop if fetch fails\n\n\tuseEffect(() => {\n\t\tloadSchemas();\n\t}, [loadSchemas]);\n\n    // Handle API Key Type change (no changes)\n    const handleApiKeyTypeChange = (event) => {\n        setSelectedApiKeyType(event.target.value);\n    };\n\n\t// Handle form submission (no changes)\n\tconst handleSubmit = async (event) => {\n\t\tevent.preventDefault();\n        const uppy = uppyRef.current;\n        if (!uppy) return;\n        const currentFiles = uppy.getFiles();\n\t\tif (currentFiles.length === 0) { setError(\"Please add files or folders.\"); return; }\n\t\tif (!prompt.trim()) { setError(\"Please enter a prompt.\"); return; }\n        if (!selectedSchema) { setError(\"Schema selection is missing. Please wait or refresh.\"); return; } // Add check\n\t\tsetIsLoading(true);\n\t\tsetError(null);\n\t\tconst formData = new FormData();\n\t\tformData.append('prompt', prompt);\n\t\tformData.append('schema_name', selectedSchema);\n\t\tformData.append('model_type', selectedModel);\n\t\tformData.append('api_key_type', selectedApiKeyType);\n        currentFiles.forEach(file => { formData.append('files', file.data, file.name); });\n\t\tconsole.log(\"Submitting FormData...\");\n\t\ttry {\n\t\t\tconst response = await processDocument(formData);\n\t\t\tsetError(null);\n\t\t\tuppy.reset();\n\t\t\tnavigate('/results', { state: { resultData: response } });\n\t\t} catch (err) {\n\t\t\t console.error(\"Form submission -> API error:\", err);\n\t\t\t setError(err.message || \"An unexpected error occurred.\");\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\t// JSX for the main form (no changes)\n\treturn (\n\t\t<div className=\"app-container\">\n\t\t\t<h1>AI Document Processor</h1>\n\t\t\t{error && !isLoading && <div className=\"error-message\">{error}</div>}\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t{/* Uppy Input */}\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"uppy-drag-drop\">1. Add Documents / Folders</label>\n\t\t\t\t\t{uppyRef.current && (\n                        <DragDrop id=\"uppy-drag-drop\" uppy={uppyRef.current} locale={{ strings: { dropHereOr: 'Drop files or folders here, or %{browse}', browse: 'browse', } }} note=\"Files/folders added will be processed.\" height=\"200px\" width=\"100%\" disabled={isLoading}/>\n                    )}\n                    <p className='file-count-display'>{fileCount} file(s) added.</p>\n\t\t\t\t</div>\n\t\t\t\t{/* Prompt Input */}\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"prompt\">2. Enter Processing Prompt</label>\n\t\t\t\t\t<textarea id=\"prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} placeholder=\"e.g., Summarize...\" required disabled={isLoading} rows={4} />\n\t\t\t\t</div>\n\t\t\t\t{/* Schema Selector */}\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"schema-select\">3. Select Output Schema (Optional)</label>\n\t\t\t\t\t<select id=\"schema-select\" value={selectedSchema} onChange={(e) => setSelectedSchema(e.target.value)} disabled={isLoading || schemas.length === 0}>\n\t\t\t\t\t\t{schemas.length === 0 && <option value=\"(No Schema - Plain Text)\">Loading / None Available</option>} \n                        {schemas.map((schema) => (<option key={schema} value={schema}>{schema}</option>))}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t {/* Model Selector */}\n\t\t\t\t <div className=\"form-group\">\n\t\t\t\t\t<label>4. Select Model</label>\n\t\t\t\t\t<div className=\"radio-group\">\n\t\t\t\t\t\t<label><input type=\"radio\" value=\"flash\" checked={selectedModel === 'flash'} onChange={(e) => setSelectedModel(e.target.value)} disabled={isLoading} /> Flash</label>\n\t\t\t\t\t\t<label><input type=\"radio\" value=\"pro\" checked={selectedModel === 'pro'} onChange={(e) => setSelectedModel(e.target.value)} disabled={isLoading} /> Pro</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n                {/* API Key Type Selector */}\n                <div className=\"form-group\">\n\t\t\t\t\t<label>5. Select API Key Type</label>\n\t\t\t\t\t<div className=\"radio-group\">\n\t\t\t\t\t\t<label><input type=\"radio\" value=\"paid\" checked={selectedApiKeyType === 'paid'} onChange={handleApiKeyTypeChange} disabled={isLoading}/> Paid Tier</label>\n\t\t\t\t\t\t<label><input type=\"radio\" value=\"free\" checked={selectedApiKeyType === 'free'} onChange={handleApiKeyTypeChange} disabled={isLoading} /> Free Tier</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* Submit Button */}\n\t\t\t\t<button type=\"submit\" disabled={isLoading || fileCount === 0}>\n\t\t\t\t\t{isLoading ? 'Processing...' : `Process ${fileCount} File(s)`}\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t{isLoading && <div className=\"loading-message\">Processing documents, please wait...</div>}\n\t\t</div>\n\t);\n}\n\nexport default App;\n"
            },
            {
                "file": "../AI_doc_processor_webapp/backend/app/schemas/api_models.py",
                "content": "# ai_doc_processor_webapp/backend/app/schemas/api_models.py\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List, Dict, Any\n\n# --- Model for Overall Usage --- \nclass UsageMetadata(BaseModel):\n    \"\"\" Structure for aggregated token usage information. \"\"\"\n    prompt_token_count: int = 0\n    candidates_token_count: int = 0\n    total_token_count: int = 0\n\n# --- Model for a Single File's Result --- \n# ** ADDED MISSING MODEL DEFINITION **\nclass SingleFileResult(BaseModel):\n    \"\"\" Structure for the result of processing a single file. \"\"\"\n    file_name: str\n    status: str = \"success\" # 'success' or 'error'\n    raw_output: Optional[str] = None\n    structured_output: Optional[Any] = None\n    error_message: Optional[str] = None\n    # Per-file usage could be added here if needed later\n    # usage_metadata: Optional[UsageMetadata] = None \n\n# --- Model for the Overall API Response (for Multi-File) --- \nclass ProcessResponse(BaseModel):\n    \"\"\" Structure for the final response from the /process endpoint. \"\"\"\n    status: str = \"success\" # 'success', 'error', 'partial_success'\n    overall_error_message: Optional[str] = None\n    results: List[SingleFileResult] = [] # List of results for each file\n    schema_used: Optional[str] = None\n    overall_usage_metadata: Optional[UsageMetadata] = None\n\n# --- Model for Schema List Response --- \nclass SchemaListResponse(BaseModel):\n    \"\"\" Response structure for the /schemas endpoint. \"\"\"\n    schemas: List[str]\n\n# --- Model for Form Fields (Explicit Form() usage) ---\n# This model is still useful for structuring the data passed to the processor\nclass ProcessForm(BaseModel):\n    \"\"\" Defines the expected form fields (used internally now). \"\"\"\n    prompt: str = Field(..., description=\"Instructions for processing.\")\n    schema_name: str = Field(..., description=\"Schema name or '(No Schema - Plain Text)'.\")\n    model_type: str = Field(..., description=\"Model type ('pro' or 'flash').\")\n    api_key_type: str = Field(..., description=\"API key type ('free' or 'paid').\")\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/index.css",
                "content": "/* Dark Mode Base */\nbody {\n\tmargin: 0;\n\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n\t\t'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n\t\tsans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n\tbackground-color: #000000; /* Pure Black Background */\n\tcolor: #e0e0e0; /* Light Grey Text */\n\tpadding: 20px;\n\tline-height: 1.6;\n}\n\n/* Code elements */\ncode {\n\tfont-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n\t\tmonospace;\n\tbackground-color: #2a2a2a; /* Dark grey background for code */\n\tcolor: #f5f5f5; /* Lighter text for code */\n\tpadding: 3px 6px;\n\tborder-radius: 4px;\n\tfont-size: 0.9em;\n}\n\n/* Main container */\n.app-container {\n\tmax-width: 900px;\n\tmargin: 30px auto;\n\tpadding: 30px 40px;\n\tbackground-color: #121212; /* Very dark grey, slightly off-black */\n\tborder-radius: 12px;\n\tborder: 1px solid #333; /* Subtle border */\n\tbox-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);\n}\n\n/* Headings */\nh1, h2, h3 {\n\tcolor: #eeeeee; /* Lighter headings */\n\tmargin-top: 0;\n\tfont-weight: 500;\n}\n\nh1 {\n\ttext-align: center;\n\tmargin-bottom: 40px;\n\tcolor: #00bcd4; /* Cyan Accent */\n\tfont-weight: 600;\n\tletter-spacing: 1px;\n}\n\n/* Form elements */\nlabel {\n\tdisplay: block;\n\tmargin-bottom: 10px;\n\tfont-weight: 600;\n\tcolor: #b0b0b0; /* Lighter grey for labels */\n\tfont-size: 0.95rem;\n}\n\ninput[type=\"text\"],\ntextarea,\nselect {\n\twidth: 100%;\n\tpadding: 12px 15px;\n\tmargin-bottom: 20px;\n\tborder: 1px solid #424242; /* Dark grey border */\n\tborder-radius: 6px;\n\tbox-sizing: border-box;\n\tfont-size: 1rem;\n\tbackground-color: #212121; /* Dark input background */\n\tcolor: #e0e0e0; /* Light text in inputs */\n\ttransition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\ninput:-webkit-autofill,\ntextarea:-webkit-autofill,\nselect:-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 30px #212121 inset !important;\n    -webkit-text-fill-color: #e0e0e0 !important;\n}\n\ninput[type=\"text\"]:focus,\ntextarea:focus,\nselect:focus {\n\tborder-color: #00bcd4; /* Cyan focus border */\n\toutline: none;\n\tbox-shadow: 0 0 0 3px rgba(0, 188, 212, 0.3); /* Cyan focus glow */\n}\n\ntextarea {\n\tmin-height: 120px;\n\tresize: vertical;\n}\n\n/* Buttons */\nbutton {\n\tbackground-color: #00bcd4;\n\tcolor: #000000;\n\tpadding: 14px 30px;\n\tborder: none;\n\tborder-radius: 6px;\n\tcursor: pointer;\n\tfont-size: 1.1rem;\n\tfont-weight: 600;\n\ttransition: background-color 0.3s ease, transform 0.1s ease;\n\tdisplay: block;\n\twidth: 100%;\n\tmargin-top: 15px;\n}\n\nbutton:hover:not(:disabled) {\n\tbackground-color: #4dd0e1;\n\ttransform: translateY(-2px);\n\tbox-shadow: 0 4px 8px rgba(0, 188, 212, 0.2);\n}\n\nbutton:disabled {\n\tbackground-color: #424242;\n\tcolor: #757575;\n\tcursor: not-allowed;\n\topacity: 0.8;\n}\n\n/* Form grouping */\n.form-group {\n\tmargin-bottom: 30px;\n}\n\n/* Radio buttons */\n.radio-group label {\n\tdisplay: inline-block;\n\tmargin-right: 25px;\n\tfont-weight: normal;\n\tcursor: pointer;\n\tcolor: #b0b0b0;\n\tpadding: 5px 0;\n}\n.radio-group input[type=\"radio\"] {\n\twidth: auto;\n\tmargin-right: 8px;\n\tvertical-align: middle;\n\tcursor: pointer;\n\taccent-color: #00bcd4;\n}\n\n/* Loading and Error messages */\n.loading-message,\n.error-message,\n.warning-message,\n.info-message {\n\tmargin-top: 30px;\n\tpadding: 15px 25px;\n\tborder-radius: 6px;\n\ttext-align: center;\n\tfont-size: 1rem;\n\tborder-width: 1px;\n\tborder-style: solid;\n}\n\n.loading-message {\n\tbackground-color: #0f3a3f;\n\tcolor: #b2ebf2;\n\tborder-color: #26c6da;\n}\n\n.error-message {\n\tbackground-color: #422020;\n\tcolor: #ffcdd2;\n\tborder-color: #e57373;\n\tfont-weight: 500;\n}\n\n.warning-message {\n    background-color: #4f4016;\n    color: #fff3c4;\n    border-color: #ffca28;\n}\n.warning-message strong {\n    color: #ffe082;\n}\n\n.info-message {\n    background-color: #1d3c56;\n    color: #d0e7ff;\n    border-color: #4a90e2;\n}\n\n/* Helper text for selected file count with Uppy */\n.file-count-display {\n\tfont-size: 0.9em;\n\tcolor: #9e9e9e;\n\tmargin-top: 10px; /* Space below Uppy */\n\tmargin-bottom: 0;\n\tdisplay: block;\n\ttext-align: center;\n}\n\n/* --- Uppy Specific Styles --- */\n/* Import base Uppy CSS */\n@import '@uppy/core/dist/style.min.css';\n@import '@uppy/drag-drop/dist/style.min.css';\n/* @import '@uppy/progress-bar/dist/style.min.css'; */ /* Only if using ProgressBar */\n\n/* Customize Uppy DragDrop */\n.uppy-DragDrop-container {\n    background-color: #2a2a2a !important;\n    border: 2px dashed #555 !important;\n    border-radius: 8px !important;\n    margin-bottom: 10px !important; /* Reduced margin */\n    transition: border-color 0.2s ease;\n}\n\n.uppy-DragDrop-container:hover,\n.uppy-DragDrop--isDragOver {\n    border-color: #00bcd4 !important;\n}\n\n.uppy-DragDrop-inner {\n    color: #b0b0b0 !important;\n}\n\n.uppy-DragDrop-label {\n    font-size: 1.1rem !important;\n}\n\n.uppy-DragDrop-note {\n    color: #777 !important;\n    font-size: 0.9rem !important;\n}\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/index.js",
                "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>\n);\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/components/ResultsPage.css",
                "content": "/* Results Page Specific Styles (Dark Mode - Multi-File - Final) */\n\n.results-page-container {\n\tmax-width: 1100px;\n\tmargin: 30px auto;\n\tpadding: 30px 40px;\n\tbackground-color: #0a0a0a;\n\tborder-radius: 8px;\n\tborder: 1px solid #2c2c2c;\n}\n\n.results-page-container h1 {\n\tcolor: #00bcd4;\n\ttext-align: center;\n\tmargin-bottom: 30px;\n\tfont-weight: 600;\n    font-size: 1.8rem;\n}\n\n.back-link-container {\n\tmargin-bottom: 35px;\n\ttext-align: center;\n}\n\n.back-link-container a {\n\tcolor: #4dd0e1;\n\ttext-decoration: none;\n\tfont-weight: 500;\n\ttransition: color 0.2s ease, background-color 0.2s ease;\n\tpadding: 8px 15px;\n\tborder-radius: 4px;\n\tborder: 1px solid #4dd0e1;\n}\n\n.back-link-container a:hover {\n\tcolor: #121212;\n    background-color: #4dd0e1;\n\ttext-decoration: none;\n}\n\n/* Full width messages */\n.full-width-message {\n    margin-left: -40px;\n    margin-right: -40px;\n    padding: 15px 40px;\n    border-radius: 0;\n    margin-bottom: 30px;\n    border-left: none;\n    border-right: none;\n}\n.results-page-container .error-message { }\n.results-page-container .warning-message { }\n.results-page-container .info-message { }\n\n\n.results-content-area {\n\tmargin-top: 20px;\n}\n\n/* Styling for each file's result block */\n.file-result-section {\n    border: 1px solid #333;\n    border-radius: 8px;\n    margin-bottom: 40px;\n    padding: 25px;\n    background-color: #1a1a1a;\n    transition: border-color 0.3s ease;\n}\n\n/* Highlight sections with errors */\n.file-error-section {\n    border-color: #e57373;\n    background-color: #2a1a1a;\n}\n\n.file-result-header {\n    color: #00bcd4;\n    font-size: 1.4rem;\n    margin-bottom: 20px;\n    padding-bottom: 10px;\n    border-bottom: 1px dashed #555;\n    font-weight: 500;\n}\n\n.file-error-message {\n    margin-top: 15px;\n    margin-bottom: 20px;\n    padding: 10px 15px;\n    font-size: 0.95rem;\n    background-color: #422020;\n    color: #ffcdd2;\n    border: 1px solid #e57373;\n    border-radius: 4px;\n}\n.file-error-message strong {\n    color: #ff8a80;\n}\n\n/* Section within a file result */\n.sub-result-section {\n    margin-bottom: 30px;\n}\n\n.section-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 18px;\n\tpadding-bottom: 12px;\n\tborder-bottom: 1px solid #424242;\n}\n\n.sub-result-section h3 {\n\tcolor: #bdbdbd;\n\tfont-size: 1.15rem;\n\tfont-weight: 600;\n    border-bottom: none;\n    padding-bottom: 0;\n    margin-bottom: 0;\n}\n\n.copy-button {\n    background-color: #333;\n    color: #bdbdbd;\n    border: 1px solid #555;\n    padding: 6px 12px;\n    font-size: 0.85rem;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.2s ease, color 0.2s ease, opacity 0.2s ease;\n    width: auto;\n    margin-top: 0;\n    font-weight: 400;\n    min-width: 100px;\n    text-align: center;\n}\n\n.copy-button:hover {\n    background-color: #444;\n    color: #fff;\n}\n\n.copy-button.copied {\n    background-color: #00695c;\n    color: #e0f2f1;\n    cursor: default;\n    border-color: #00897b;\n}\n.copy-button:disabled {\n    opacity: 0.8;\n    cursor: default;\n}\n\n/* JSON viewer wrapper */\n.json-viewer-wrapper {\n\tbackground-color: #1e1e1e;\n\tborder: 1px solid #424242;\n\tborder-radius: 6px;\n\toverflow: visible;\n}\n/* Apply scroll within the JsonViewer's own container if needed */\n.json-viewer-wrapper > div { \n    /* max-height: 70vh; */ /* REMOVED - Let it expand */\n    overflow: visible; /* Let content determine height */\n}\n\n\n/* Markdown wrapper */\n.markdown-content-wrapper {\n    padding-right: 0;\n    border: none;\n    border-radius: 0;\n    padding: 0;\n    background-color: transparent;\n    /* Let content expand */\n}\n\n.markdown-content {\n\tcolor: #e0e0e0;\n\tline-height: 1.7;\n}\n\n/* Markdown Element Styling */\n.markdown-content h1, .markdown-content h2, .markdown-content h3, .markdown-content h4, .markdown-content h5, .markdown-content h6 { color: #eeeeee; margin-top: 1.6em; margin-bottom: 0.8em; padding-bottom: 0.4em; border-bottom: 1px solid #424242; font-weight: 600; text-align: left; }\n.markdown-content h1 { font-size: 1.8em; color: #4dd0e1; }\n.markdown-content h2 { font-size: 1.5em; color: #ce93d8; }\n.markdown-content h3 { font-size: 1.25em; color: #80cbc4; }\n.markdown-content h4 { font-size: 1.1em; color: #90a4ae; border-bottom: none; }\n.markdown-content h5, .markdown-content h6 { color: #b0bec5; border-bottom: none; font-weight: 500; }\n.markdown-content p { margin-bottom: 1em; }\n.markdown-content a { color: #4dd0e1; text-decoration: none; }\n.markdown-content a:hover { text-decoration: underline; }\n.markdown-content strong { font-weight: bold; color: #f5f5f5; }\n.markdown-content em { font-style: italic; }\n.markdown-content pre { background-color: #2a2a2a; color: #d0d0d0; padding: 15px; margin: 1.5em 0; border-radius: 6px; overflow-x: auto; border: 1px solid #424242; }\n.markdown-content pre code { background-color: transparent; padding: 0; font-size: 0.9em; line-height: 1.4; }\n.markdown-content p > code, .markdown-content li > code { font-size: 0.9em; }\n.markdown-content ul, .markdown-content ol { padding-left: 30px; margin-bottom: 1em; }\n.markdown-content li { margin-bottom: 0.5em; }\n.markdown-content blockquote { border-left: 4px solid #0097a7; margin: 1.5em 0; padding: 0.5em 15px; color: #b0b0b0; background-color: #212121; }\n.markdown-content blockquote p { margin-bottom: 0.5em; }\n.markdown-content table { border-collapse: collapse; margin: 1.5em 0; width: 100%; display: block; overflow-x: auto; }\n.markdown-content th, .markdown-content td { border: 1px solid #424242; padding: 10px 12px; text-align: left; }\n.markdown-content th { background-color: #2a2a2a; font-weight: bold; color: #eeeeee; }\n.markdown-content tr:nth-child(even) { background-color: #212121; }\n\n/* Raw output box (fallback) */\n.raw-output-box-results {\n\tbackground-color: #2a2a2a;\n\tborder: 1px solid #424242;\n\tpadding: 15px;\n\tborder-radius: 6px;\n\twhite-space: pre-wrap;\n\tword-wrap: break-word;\n\tfont-family: 'Courier New', Courier, monospace;\n\tfont-size: 0.9rem;\n\tcolor: #d0d0d0;\n\tline-height: 1.5;\n}\n\n/* Overall Usage Stats */\n.overall-usage {\n    margin-top: 50px;\n    padding-top: 25px;\n    border-top: 2px solid #555;\n}\n\n.usage-stats-results h3 {\n    border-bottom: none;\n    padding-bottom: 0;\n    margin-bottom: 15px;\n    color: #00bcd4;\n}\n.usage-stats-results p {\n\tmargin: 8px 0;\n\tfont-size: 0.95rem;\n    color: #b0b0b0;\n}\n.usage-stats-results strong {\n\tcolor: #e0e0e0;\n\tmin-width: 150px;\n\tdisplay: inline-block;\n}\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/components/ResultsPage.js",
                "content": "import React, { useState } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { JsonViewer } from '@textea/json-viewer';\nimport './ResultsPage.css';\n\n// --- JSDoc type definitions for clarity (optional but helpful) --- \n/**\n * @typedef {object} SingleFileResult\n * @property {string} file_name\n * @property {'success' | 'error'} status\n * @property {string | null | undefined} raw_output\n * @property {any | null | undefined} structured_output\n * @property {string | null | undefined} error_message\n */\n\n/**\n * @typedef {object} UsageMetadata\n * @property {number | null | undefined} prompt_token_count\n * @property {number | null | undefined} candidates_token_count\n * @property {number | null | undefined} total_token_count\n */\n\n/**\n * @typedef {object} ResultsData\n * @property {'success' | 'error' | 'partial_success'} status\n * @property {string | null | undefined} overall_error_message\n * @property {SingleFileResult[]} results\n * @property {string | null | undefined} schema_used\n * @property {UsageMetadata | null | undefined} overall_usage_metadata\n */\n\n/**\n * Default empty state matching the ResultsData structure\n * @type {ResultsData}\n */\nconst defaultResultsData = {\n\tstatus: 'error',\n\toverall_error_message: 'No result data found or invalid format. Please go back and process documents.',\n\tresults: [],\n\tschema_used: null,\n\toverall_usage_metadata: null\n};\n\nfunction ResultsPage() {\n\tconst location = useLocation();\n\n\t/** @type {ResultsData} */\n\tconst result = location.state?.resultData && Array.isArray(location.state.resultData.results)\n\t\t? location.state.resultData\n\t\t: defaultResultsData;\n\n\tconst {\n\t\tstatus: overallStatus,\n\t\toverall_error_message,\n\t\tresults,\n\t\tschema_used,\n\t\toverall_usage_metadata\n\t} = result;\n\n    /** @type {[Record<string, string>, React.Dispatch<React.SetStateAction<Record<string, string>>>]} */\n\tconst [copyStatus, setCopyStatus] = useState({}); // { [key: string]: 'Copy' | 'Copied!' | 'Failed' }\n\n    // Generic copy function (no type annotations needed for parameters)\n    const copyToClipboard = (text, type, index) => {\n\t\tconst key = `${type}-${index}`;\n        // Initialize button state immediately\n        setCopyStatus(prev => ({ ...prev, [key]: 'Copying...' })); \n\n\t\tif (!navigator.clipboard || !text) {\n            console.error('Clipboard API not available or text is empty.');\n            setCopyStatus(prev => ({ ...prev, [key]: 'Copy Failed' }));\n            setTimeout(() => setCopyStatus(prev => ({ ...prev, [key]: prev[key] === 'Copy Failed' ? 'Copy' : prev[key] })), 2000); // Reset only if still 'Failed'\n            return;\n        }\n\n        navigator.clipboard.writeText(text).then(() => {\n            setCopyStatus(prev => ({ ...prev, [key]: 'Copied!' }));\n            setTimeout(() => setCopyStatus(prev => ({ ...prev, [key]: prev[key] === 'Copied!' ? 'Copy' : prev[key] })), 1500); // Reset only if still 'Copied!'\n        }).catch(err => {\n            console.error('Failed to copy text: ', err);\n            setCopyStatus(prev => ({ ...prev, [key]: 'Copy Failed' }));\n            setTimeout(() => setCopyStatus(prev => ({ ...prev, [key]: prev[key] === 'Copy Failed' ? 'Copy' : prev[key] })), 2000); // Reset only if still 'Failed'\n        });\n    };\n\n\t// RETURN STATEMENT STARTS HERE - NO TYPE ANNOTATIONS BEFORE THIS\n\treturn (\n\t\t<div className=\"results-page-container\">\n\t\t\t<h1>Processing Results</h1>\n\n\t\t\t<div className=\"back-link-container\">\n\t\t\t\t<Link to=\"/\">\u2190 Process More Documents</Link>\n\t\t\t</div>\n\n\t\t\t{/* Display overall error/status messages */}\n\t\t\t{overallStatus === 'error' && overall_error_message && (\n\t\t\t\t<div className=\"error-message full-width-message\">\n\t\t\t\t\t<strong>Error:</strong> {overall_error_message}\n\t\t\t\t</div>\n\t\t\t)}\n            {overallStatus === 'partial_success' && (\n\t\t\t\t<div className=\"warning-message full-width-message\">\n\t\t\t\t\t<strong>Note:</strong> Some files encountered errors during processing.\n\t\t\t\t</div>\n\t\t\t)}\n            {(overallStatus === 'success' || overallStatus === 'partial_success') && (!results || results.length === 0) && !overall_error_message && (\n                <div className=\"info-message full-width-message\">\n                    Processing completed, but no valid files were found or processed.\n                </div>\n            )}\n\n\t\t\t{/* --- Loop through results for each file --- */ } \n\t\t\t<div className=\"results-content-area\">\n                {results && results.length > 0 && results.map((fileResult, index) => {\n                    const jsonCopyKey = `json-${index}`;\n                    const rawCopyKey = `raw-${index}`;\n                    // Provide default 'Copy' status if key doesn't exist yet\n                    const currentJsonCopyText = copyStatus[jsonCopyKey] || 'Copy JSON';\n                    const currentRawCopyText = copyStatus[rawCopyKey] || 'Copy Raw Text';\n                    const isJsonCopying = currentJsonCopyText !== 'Copy JSON';\n                    const isRawCopying = currentRawCopyText !== 'Copy Raw Text';\n\n                    const isFileError = fileResult.status === 'error';\n                    const isJsonParseWarning = fileResult.status === 'success' && fileResult.error_message && fileResult.structured_output === null;\n\n                    let rawTitle = \"Response\";\n                    if (isJsonParseWarning) {\n                        rawTitle = \"Raw Output (JSON Parsing Failed)\";\n                    } else if (!fileResult.structured_output && fileResult.raw_output) {\n                        rawTitle = \"Response (Rendered as Markdown)\";\n                    } else if (fileResult.structured_output && fileResult.raw_output) {\n                        rawTitle = \"Raw Output (Fallback)\";\n                    }\n\n                    return (\n                        <section key={index} className={`result-section file-result-section ${isFileError ? 'file-error-section' : ''}`}>\n                            <h2 className=\"file-result-header\">File: {fileResult.file_name || `Item ${index + 1}`}</h2>\n\n                            {isFileError && fileResult.error_message && (\n                                <div className=\"error-message file-error-message\">\n                                    <strong>Error:</strong> {fileResult.error_message}\n                                </div>\n                            )}\n                             {isJsonParseWarning && fileResult.error_message && (\n                                <div className=\"warning-message file-error-message\">\n                                    <strong>Note:</strong> {fileResult.error_message}\n                                </div>\n                            )}\n\n                            {/* Structured Output for this file */}\n                            {fileResult.structured_output && (\n                                <div className=\"sub-result-section\">\n                                    <header className=\"section-header\">\n                                        <h3>Structured Output ({schema_used || 'N/A'})</h3>\n                                        <button\n                                            onClick={() => copyToClipboard(JSON.stringify(fileResult.structured_output, null, 2), 'json', index)}\n                                            className={`copy-button ${isJsonCopying && currentJsonCopyText !== 'Copy Failed' ? 'copied' : ''}`}\n                                            disabled={isJsonCopying}\n                                        >\n                                            {currentJsonCopyText}\n                                        </button>\n                                    </header>\n                                    <div className=\"json-viewer-wrapper\">\n                                        <JsonViewer\n                                            value={fileResult.structured_output}\n                                            theme=\"vscode\" dark={true} indentWidth={2}\n                                            collapsed={false} enableClipboard={false}\n                                            displayDataTypes={false} displayObjectSize={true}\n                                        />\n                                    </div>\n                                </div>\n                            )}\n\n                            {/* Raw Output for this file */}\n                            {fileResult.raw_output && (\n                                <div className=\"sub-result-section\">\n                                    <header className=\"section-header\">\n                                        <h3>{rawTitle}</h3>\n                                         <button\n                                            onClick={() => copyToClipboard(fileResult.raw_output, 'raw', index)}\n                                            className={`copy-button ${isRawCopying && currentRawCopyText !== 'Copy Failed' ? 'copied' : ''}`}\n                                            disabled={isRawCopying}\n                                        >\n                                            {currentRawCopyText}\n                                        </button>\n                                    </header>\n                                    {!fileResult.structured_output ? (\n                                        <div className=\"markdown-content-wrapper\">\n                                            {/* Added className for potential styling */}\n                                            <ReactMarkdown remarkPlugins={[remarkGfm]} className=\"markdown-content\">{fileResult.raw_output}</ReactMarkdown>\n                                        </div>\n                                    ) : (\n                                        <pre className=\"raw-output-box-results\">{fileResult.raw_output}</pre>\n                                    )}\n                                </div>\n                            )}\n\n                             {fileResult.status === 'success' && !fileResult.raw_output && !fileResult.structured_output && (\n                                 <p><i>No output content generated for this file.</i></p>\n                             )}\n                        </section>\n                    )\n                })}\n\n\t\t\t\t{/* --- Overall Usage Statistics --- */ } \n\t\t\t\t{overall_usage_metadata && (overallStatus === 'success' || overallStatus === 'partial_success') && (\n\t\t\t\t\t<section className=\"result-section usage-stats-results overall-usage\">\n\t\t\t\t\t\t<h3>Overall Usage Statistics</h3>\n\t\t\t\t\t\t<p><strong>Total Input Tokens:</strong> {overall_usage_metadata.prompt_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t\t<p><strong>Total Output Tokens:</strong> {overall_usage_metadata.candidates_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t\t<p><strong>Grand Total Tokens:</strong> {overall_usage_metadata.total_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t</section>\n\t\t\t\t)}\n\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ResultsPage;\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/components/OutputDisplay.css",
                "content": ".output-container {\n\tmargin-top: 40px;\n\tpadding: 25px 35px;\n\tbackground-color: #1e1e1e; /* Slightly lighter dark background for results */\n\tborder: 1px solid #424242; /* Dark grey border */\n\tborder-radius: 8px;\n}\n\n.output-container h2 {\n\tmargin-top: 0;\n\tcolor: #00bcd4; /* Cyan */\n\tborder-bottom: 2px solid #424242;\n\tpadding-bottom: 15px;\n\tmargin-bottom: 25px;\n\tfont-weight: 500;\n\tfont-size: 1.5rem;\n}\n\n.output-section {\n\tmargin-bottom: 30px;\n}\n\n.output-section h3 {\n\tmargin-bottom: 15px;\n\tcolor: #bdbdbd; /* Lighter grey for subheadings */\n\tfont-size: 1.15rem;\n\tfont-weight: 600;\n\tborder-bottom: 1px solid #424242;\n\tpadding-bottom: 8px;\n}\n\n/* Styling for the raw text output box */\n.raw-output-box {\n\tbackground-color: #2a2a2a; /* Darker background for code/raw text */\n\tborder: 1px solid #424242;\n\tpadding: 15px;\n\tborder-radius: 5px;\n\twhite-space: pre-wrap;\n\tword-wrap: break-word;\n\tmax-height: 500px;\n\toverflow-y: auto;\n\tfont-family: 'Courier New', Courier, monospace;\n\tfont-size: 0.9rem;\n\tcolor: #d0d0d0; /* Slightly lighter text for raw output */\n\tline-height: 1.5;\n}\n\n/* Styling for usage stats */\n.usage-stats p {\n\tmargin: 8px 0;\n\tfont-size: 0.95rem;\n    color: #b0b0b0;\n}\n.usage-stats strong {\n\tcolor: #e0e0e0;\n\tmin-width: 120px;\n\tdisplay: inline-block;\n}\n\n/* Error / Warning messages inside results */\n.output-container .error-message {\n\t/* Uses global .error-message style */\n\tmargin-bottom: 25px;\n\ttext-align: left;\n    border-width: 2px;\n}\n.output-container .warning-message { /* Style warnings differently */\n    margin-top: 25px;\n    padding: 15px 25px;\n    border-radius: 6px;\n    text-align: left;\n    font-size: 1rem;\n    border-width: 1px;\n    border-style: solid;\n    background-color: #4f4016; /* Dark Orange/Yellow background */\n    color: #fff3c4; /* Light Yellow text */\n    border-color: #ffca28; /* Amber border */\n    margin-bottom: 25px;\n}\n.output-container .warning-message strong {\n    color: #ffe082; /* Slightly darker yellow for strong text */\n}\n\n\n/* Styling for @textea/json-viewer */\n/* Ensure the viewer takes the theme prop for dark mode */\n\n\n.output-section p i {\n\tcolor: #9e9e9e; /* Medium grey for italic notes */\n}\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/components/OutputDisplay.js",
                "content": "import React from 'react';\nimport { JsonViewer } from '@textea/json-viewer';\nimport './OutputDisplay.css';\n\nconst OutputDisplay = ({ result }) => {\n\tif (!result) {\n\t\treturn null;\n\t}\n\n\tconst {\n\t\tstatus,\n\t\traw_output,\n\t\tstructured_output,\n\t\tschema_used,\n\t\tusage_metadata,\n\t\terror_message // Can be error OR warning (like failed JSON parse)\n\t} = result;\n\n\tconst hasStructuredData = structured_output !== null && structured_output !== undefined;\n\tconst wasStructuredAttempted = schema_used && schema_used !== '(No Schema - Plain Text)';\n\tconst isProcessingError = status === 'error'; // Use status to determine if it was a hard error\n\tconst isParsingWarning = status === 'success' && error_message; // Success but with a post-processing issue\n\n\treturn (\n\t\t<div className=\"output-container\">\n\t\t\t<h2>Processing Result</h2>\n\n\t\t\t{/* Display hard processing error */}\n\t\t\t{isProcessingError && error_message && (\n\t\t\t\t<div className=\"error-message\">\n\t\t\t\t\t<strong>Processing Error:</strong> {error_message}\n\t\t\t\t</div>\n\t\t\t)}\n\n            {/* Display parsing/validation warning */}\n            {isParsingWarning && error_message && (\n\t\t\t\t<div className=\"warning-message\"> {/* Style this differently? */} \n\t\t\t\t\t<strong>Note:</strong> {error_message}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Display Structured Output Section - only if attempted */}\n\t\t\t{wasStructuredAttempted && (\n\t\t\t\t <div className=\"output-section\">\n\t\t\t\t\t<h3>Structured Output ({schema_used || 'Attempted'})</h3>\n\t\t\t\t\t{hasStructuredData ? (\n\t\t\t\t\t\t<JsonViewer\n\t\t\t\t\t\t\tvalue={structured_output}\n                            theme=\"vscode\" // Example dark theme for json-viewer\n                            dark={true}\n                            indentWidth={2}\n                            collapsed={false}\n                            enableClipboard={true}\n                            displayDataTypes={false}\n                            displayObjectSize={true}\n                            style={{ padding: '15px', borderRadius: '5px', backgroundColor: '#1e1e1e' /* Dark background for viewer */ }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t// Don't show if processing error, error message already covers it\n                        // Show only if success but parsing failed (isParsingWarning)\n                        isParsingWarning && <p><i>JSON parsing failed. See raw output below.</i></p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Display Raw Output Section - always show if available */}\n\t\t\t{raw_output && (\n\t\t\t\t<div className=\"output-section\">\n\t\t\t\t\t<h3>Raw Output</h3>\n\t\t\t\t\t<pre className=\"raw-output-box\">{raw_output}</pre>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Display Usage Statistics Section - only on success */}\n\t\t\t{usage_metadata && status === 'success' && (\n\t\t\t\t<div className=\"output-section usage-stats\">\n\t\t\t\t\t<h3>Usage Statistics</h3>\n\t\t\t\t\t<p><strong>Input Tokens:</strong> {usage_metadata.prompt_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t<p><strong>Output Tokens:</strong> {usage_metadata.candidates_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t<p><strong>Total Tokens:</strong> {usage_metadata.total_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Fallback message */}\n\t\t\t{status === 'success' && !raw_output && !hasStructuredData && !isParsingWarning && (\n\t\t\t\t <p><i>Processing completed successfully, but the model returned no output content.</i></p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default OutputDisplay;\n"
            },
            {
                "file": "../AI_doc_processor_webapp/frontend/src/services/api.js",
                "content": "import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst apiClient = axios.create({\n\tbaseURL: API_BASE_URL,\n\theaders: {\n\t\t'Accept': 'application/json',\n\t},\n});\n\n/**\n * Fetches the list of available schema names from the backend.\n * @returns {Promise<string[]>}\n * @throws {Error}\n */\nexport const fetchSchemas = async () => {\n\tconsole.log(`Fetching schemas from ${API_BASE_URL}/schemas`);\n\ttry {\n\t\tconst response = await apiClient.get('/schemas');\n\t\tif (response.data && Array.isArray(response.data.schemas)) {\n\t\t\treturn response.data.schemas;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid response format for schemas.\");\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(\"Error fetching schemas:\", error.response || error.message);\n\t\tconst detail = error.response?.data?.detail;\n\t\tthrow new Error(detail || \"Failed to fetch schemas.\");\n\t}\n};\n\n/**\n * Sends the document processing request.\n * @param {FormData} formData\n * @returns {Promise<object>}\n * @throws {Error}\n */\nexport const processDocument = async (formData) => {\n\tconsole.log(`Sending processing request to ${API_BASE_URL}/process`);\n\ttry {\n\t\tconsole.log(\"FormData entries before sending:\");\n        for (let [key, value] of formData.entries()) {\n            if (value instanceof File) {\n                console.log(`  ${key}: File(name=${value.name}, size=${value.size}, type=${value.type})`);\n            } else {\n                console.log(`  ${key}: ${value}`);\n            }\n        }\n\n\t\tconst response = await apiClient.post('/process', formData, {\n\t\t\t// Axios automatically sets 'Content-Type': 'multipart/form-data' for FormData\n\t\t\t// timeout: 600000 // 10 minutes - Consider adding timeout for long processes\n\t\t});\n\t\tconsole.log(\"Processing response received:\", response.data);\n\t\treturn response.data;\n\t} catch (error) {\n\t\tconsole.error(\"Error processing document:\", error);\n\t\tlet errorMessage = \"An unexpected error occurred during processing.\";\n\n\t\tif (error.response) {\n\t\t\t// The request was made and the server responded with a status code\n\t\t\t// that falls out of the range of 2xx\n\t\t\tconsole.error(\"Backend Error Status:\", error.response.status);\n\t\t\tconsole.error(\"Backend Error Data:\", error.response.data);\n\t\t\t// Try to extract a meaningful message from FastAPI/Pydantic validation errors\n\t\t\tif (error.response.status === 422 && error.response.data?.detail) {\n\t\t\t\ttry {\n                    // FastAPI validation errors are often an array of objects\n                    if (Array.isArray(error.response.data.detail)) {\n                        errorMessage = error.response.data.detail\n                            .map(err => `${err.loc ? err.loc.join(' -> ') : 'field'}: ${err.msg}`)\n                            .join('; ');\n                    } else if (typeof error.response.data.detail === 'string'){\n                        errorMessage = error.response.data.detail;\n                    } else {\n                         errorMessage = `Validation Error (Code 422): ${JSON.stringify(error.response.data.detail)}`;\n                    }\n                } catch (parseError) {\n                    errorMessage = `Validation Error (Code 422): Could not parse details.`;\n                }\n\t\t\t} else {\n                // Use error_message or detail if available, otherwise a generic status message\n\t\t\t    errorMessage = error.response.data?.error_message \n                               || error.response.data?.detail \n                               || `Request failed with status ${error.response.status}`;\n            }\n\t\t} else if (error.request) {\n\t\t\t// The request was made but no response was received\n\t\t\tconsole.error(\"No response received:\", error.request);\n\t\t\terrorMessage = \"No response from server. Check network connection or server status.\";\n\t\t} else {\n\t\t\t// Something happened in setting up the request that triggered an Error\n\t\t\tconsole.error('Error setting up request:', error.message);\n            errorMessage = error.message;\n\t\t}\n\t\tthrow new Error(errorMessage);\n\t}\n};\n"
            },
            {
                "file": "../AI_doc_processor_webapp/backend/app/core/processor.py",
                "content": "# ai_doc_processor_webapp/backend/app/core/processor.py\nimport os\nimport json\nimport logging\nimport asyncio\nfrom typing import Optional, Dict, Any, List, Union, Tuple\n\n# Third-party imports\nfrom google.genai import types\nimport google.api_core.exceptions\nfrom pydantic import BaseModel\n\n# Import schemas and utils\nfrom ..schemas.api_models import SingleFileResult, UsageMetadata, ProcessForm # Import ProcessForm\n# Assumes main.py added original project root to sys.path\ntry:\n    from src.utils import gemini_utils\n    logger = logging.getLogger(\"api_processor\")\n    logger.info(\"Processor: Imported refactored gemini_utils.\")\nexcept ImportError as e:\n    print(f\"FATAL Processor Import Error: Check sys.path. Error: {e}\", file=sys.stderr)\n    raise\n\nasync def process_document_web_multi(\n    files_data: List[Tuple[str, bytes, str]], # List of (filename, content_bytes, mime_type)\n    form_data: ProcessForm, # Expect the validated Pydantic model\n) -> Dict[str, Any]:\n    \"\"\"\n    Processes multiple documents for the web app using refactored gemini_utils.\n    Loops through files, calls API for each, aggregates results.\n    \"\"\"\n    # Initialize overall response structure\n    overall_result = {\n        \"status\": \"success\",\n        \"overall_error_message\": None,\n        \"results\": [],\n        \"schema_used\": None,\n        \"overall_usage_metadata\": {\"prompt_token_count\": 0, \"candidates_token_count\": 0, \"total_token_count\": 0}\n    }\n    all_succeeded = True\n    any_succeeded = False\n\n    logger.info(f\"Processing {len(files_data)} files: schema='{form_data.schema_name}', model='{form_data.model_type}', key='{form_data.api_key_type}'\")\n\n    try:\n        # --- 1. Determine Mode & Schema ONCE for the batch --- \n        effective_schema_name = form_data.schema_name if form_data.schema_name != \"(No Schema - Plain Text)\" else None\n        selected_schema_class = None\n        is_structured_mode = False\n        if effective_schema_name:\n            selected_schema_class = gemini_utils.resolve_schema_class(effective_schema_name)\n            if selected_schema_class:\n                resolved_name = selected_schema_class.__name__\n                overall_result[\"schema_used\"] = resolved_name\n                is_structured_mode = True\n                if resolved_name == gemini_utils.DEFAULT_SCHEMA_NAME and effective_schema_name != gemini_utils.DEFAULT_SCHEMA_NAME:\n                    logger.warning(f\"Schema fallback: '{effective_schema_name}' -> '{resolved_name}'.\")\n                    overall_result[\"schema_used\"] = f\"{effective_schema_name} (Not Found -> Default: {resolved_name})\"\n            else: is_structured_mode = False\n        else: is_structured_mode = False\n        logger.info(f\"Batch Mode: Structured={is_structured_mode}, Schema='{overall_result['schema_used'] or 'None'}'\")\n\n        # --- 2. Configure Gemini Client & Model ONCE --- \n        client, model_name = gemini_utils.configure_gemini(form_data.model_type, form_data.api_key_type)\n\n        # --- 3. Load System Instructions ONCE --- \n        sys_instructions_str = gemini_utils.load_system_instructions(is_structured_mode)\n\n        # --- 4. Prepare Common Generation Config Args --- \n        gen_config_args = { \"max_output_tokens\": 8192 }\n        if sys_instructions_str: gen_config_args[\"system_instruction\"] = sys_instructions_str\n        if is_structured_mode and selected_schema_class:\n            gen_config_args[\"response_mime_type\"] = \"application/json\"\n            gen_config_args[\"response_schema\"] = selected_schema_class\n        try:\n            # Use correct type: GenerateContentConfig\n            base_generation_config = types.GenerateContentConfig(**gen_config_args)\n            logger.debug(\"Created base GenerateContentConfig.\")\n        except Exception as config_err: raise ValueError(f\"Internal config error: {config_err}\") from config_err\n\n\n        # --- 5. Loop Through Files and Process Each --- \n        total_prompt_tokens = 0\n        total_candidates_tokens = 0\n        total_tokens = 0\n\n        for filename, file_content, file_mime_type in files_data:\n            logger.info(f\"Processing file: {filename} ({len(file_content)} bytes)\")\n            single_file_result = SingleFileResult(file_name=filename, status=\"processing\") # Use Pydantic model\n            \n            try:\n                # --- 5a. Prepare Input Content for this file --- \n                contents: List[Union[str, types.Part]] = []\n                processed_mime_type = file_mime_type.lower() if file_mime_type else 'application/octet-stream'\n                if processed_mime_type.startswith(\"text/\") or processed_mime_type == \"application/json\":\n                    try: contents = [file_content.decode(\"utf-8-sig\"), form_data.prompt]\n                    except UnicodeDecodeError: raise ValueError(\"Failed to decode text file as UTF-8.\")\n                elif processed_mime_type in [\"application/pdf\", \"image/jpeg\", \"image/png\", \"image/webp\", \"image/gif\", \"image/jpg\"]:\n                    mime_map = {'image/jpg': 'image/jpeg'}; final_mime = mime_map.get(processed_mime_type, processed_mime_type)\n                    contents = [types.Part.from_bytes(data=file_content, mime_type=final_mime), form_data.prompt]\n                else: raise ValueError(f\"Unsupported file type: {processed_mime_type}\")\n\n                # --- 5b. Call Gemini API (using asyncio.to_thread) --- \n                logger.debug(f\"Calling API for {filename}...\")\n                gemini_response = await asyncio.to_thread(\n                    gemini_utils.generate_gemini_content, # Sync function\n                    genai_client=client, model_name=model_name, contents=contents,\n                    generation_config=base_generation_config, is_structured_mode=is_structured_mode\n                )\n                logger.debug(f\"API call completed for {filename}.\")\n\n                # --- 5c. Process Response for this file --- \n                single_file_result.raw_output = gemini_response.text\n                if gemini_response.usage_metadata:\n                    prompt_tokens = gemini_response.usage_metadata.prompt_token_count or 0\n                    candidates_tokens = gemini_response.usage_metadata.candidates_token_count or 0\n                    total_prompt_tokens += prompt_tokens\n                    total_candidates_tokens += candidates_tokens\n                    total_tokens += gemini_response.usage_metadata.total_token_count or (prompt_tokens + candidates_tokens)\n                    # Maybe store per-file usage if needed: \n                    # single_file_result.usage_metadata = UsageMetadata(...) \n\n                if is_structured_mode:\n                    parsed_obj = gemini_utils.parse_json_from_response_text(gemini_response.text)\n                    if parsed_obj is not None: \n                        single_file_result.structured_output = parsed_obj\n                    else: \n                        logger.warning(f\"JSON parse failed for file: {filename}\")\n                        single_file_result.error_message = \"Model response not valid JSON.\"\n                        # Keep status success, but note the parsing issue\n                \n                single_file_result.status = \"success\"\n                any_succeeded = True\n\n            # --- 5d. Handle Errors for this specific file --- \n            except (google.api_core.exceptions.GoogleAPIError, ValueError, Exception) as file_e:\n                logger.error(f\"Error processing file {filename}: {type(file_e).__name__}: {file_e}\", exc_info=False) # Log less verbosely in loop\n                single_file_result.status = \"error\"\n                error_prefix = \"API Error\" if isinstance(file_e, google.api_core.exceptions.GoogleAPIError) else \\\n                               \"Input Error\" if isinstance(file_e, ValueError) else \\\n                               \"Processing Error\"\n                single_file_result.error_message = f\"{error_prefix}: {str(file_e)[:200]}\"\n                all_succeeded = False # Mark overall status as partial\n            \n            overall_result[\"results\"].append(single_file_result.model_dump()) # Append result dict\n\n        # --- 6. Finalize Overall Status and Usage --- \n        if not any_succeeded and files_data: # Check if list wasn't empty\n            overall_result[\"status\"] = \"error\"\n            overall_result[\"overall_error_message\"] = \"Processing failed for all files.\"\n        elif not all_succeeded:\n            overall_result[\"status\"] = \"partial_success\"\n        # Else status remains \"success\"\n\n        overall_result[\"overall_usage_metadata\"] = {\n            \"prompt_token_count\": total_prompt_tokens,\n            \"candidates_token_count\": total_candidates_tokens,\n            \"total_token_count\": total_tokens\n        }\n        logger.info(f\"Overall Usage: {overall_result['overall_usage_metadata']}\")\n\n    # --- Handle Errors occurring before the loop --- \n    except (ValueError, ImportError, Exception) as setup_e:\n        logger.error(f\"Error during setup before processing files: {type(setup_e).__name__}: {setup_e}\", exc_info=True)\n        overall_result[\"status\"] = \"error\"\n        overall_result[\"overall_error_message\"] = f\"Setup Error: {str(setup_e)[:250]}\"\n        overall_result[\"results\"] = [] # No individual results if setup failed\n        overall_result[\"overall_usage_metadata\"] = None\n\n    logger.info(f\"Processor finished. Overall Status: {overall_result['status']}\")\n    return overall_result\n"
            }
]
