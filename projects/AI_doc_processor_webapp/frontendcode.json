[

  {
    "file": "./frontend/src/components/ResultsPage.js",
    "content": "import React, { useState } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { JsonViewer } from '@textea/json-viewer';\nimport './ResultsPage.css';\n\n// --- JSDoc type definitions for clarity (optional but helpful) --- \n/**\n * @typedef {object} SingleFileResult\n * @property {string} file_name\n * @property {'success' | 'error'} status\n * @property {string | null | undefined} raw_output\n * @property {any | null | undefined} structured_output\n * @property {string | null | undefined} error_message\n */\n\n/**\n * @typedef {object} UsageMetadata\n * @property {number | null | undefined} prompt_token_count\n * @property {number | null | undefined} candidates_token_count\n * @property {number | null | undefined} total_token_count\n */\n\n/**\n * @typedef {object} ResultsData\n * @property {'success' | 'error' | 'partial_success'} status\n * @property {string | null | undefined} overall_error_message\n * @property {SingleFileResult[]} results\n * @property {string | null | undefined} schema_used\n * @property {UsageMetadata | null | undefined} overall_usage_metadata\n */\n\n/**\n * Default empty state matching the ResultsData structure\n * @type {ResultsData}\n */\nconst defaultResultsData = {\n\tstatus: 'error',\n\toverall_error_message: 'No result data found or invalid format. Please go back and process documents.',\n\tresults: [],\n\tschema_used: null,\n\toverall_usage_metadata: null\n};\n\nfunction ResultsPage() {\n\tconst location = useLocation();\n\n\t/** @type {ResultsData} */\n\tconst result = location.state?.resultData && Array.isArray(location.state.resultData.results)\n\t\t? location.state.resultData\n\t\t: defaultResultsData;\n\n\tconst {\n\t\tstatus: overallStatus,\n\t\toverall_error_message,\n\t\tresults,\n\t\tschema_used,\n\t\toverall_usage_metadata\n\t} = result;\n\n    /** @type {[Record<string, string>, React.Dispatch<React.SetStateAction<Record<string, string>>>]} */\n\tconst [copyStatus, setCopyStatus] = useState({}); // { [key: string]: 'Copy' | 'Copied!' | 'Failed' }\n\n    // Generic copy function (no type annotations needed for parameters)\n    const copyToClipboard = (text, type, index) => {\n\t\tconst key = `${type}-${index}`;\n\t\tif (!navigator.clipboard || !text) {\n            console.error('Clipboard API not available or text is empty.');\n            setCopyStatus(prev => ({ ...prev, [key]: 'Copy Failed' }));\n            setTimeout(() => setCopyStatus(prev => ({ ...prev, [key]: 'Copy' })), 2000);\n            return;\n        }\n\n        navigator.clipboard.writeText(text).then(() => {\n            setCopyStatus(prev => ({ ...prev, [key]: 'Copied!' }));\n            setTimeout(() => setCopyStatus(prev => ({ ...prev, [key]: 'Copy' })), 1500);\n        }).catch(err => {\n            console.error('Failed to copy text: ', err);\n            setCopyStatus(prev => ({ ...prev, [key]: 'Copy Failed' }));\n            setTimeout(() => setCopyStatus(prev => ({ ...prev, [key]: 'Copy' })), 2000);\n        });\n    };\n\n\t// RETURN STATEMENT STARTS HERE - NO TYPE ANNOTATIONS BEFORE THIS\n\treturn (\n\t\t<div className=\"results-page-container\">\n\t\t\t<h1>Processing Results</h1>\n\n\t\t\t<div className=\"back-link-container\">\n\t\t\t\t<Link to=\"/\">‚Üê Process More Documents</Link>\n\t\t\t</div>\n\n\t\t\t{/* Display overall error/status messages */}\n\t\t\t{overallStatus === 'error' && overall_error_message && (\n\t\t\t\t<div className=\"error-message full-width-message\">\n\t\t\t\t\t<strong>Error:</strong> {overall_error_message}\n\t\t\t\t</div>\n\t\t\t)}\n            {overallStatus === 'partial_success' && (\n\t\t\t\t<div className=\"warning-message full-width-message\">\n\t\t\t\t\t<strong>Note:</strong> Some files encountered errors during processing.\n\t\t\t\t</div>\n\t\t\t)}\n            {(overallStatus === 'success' || overallStatus === 'partial_success') && (!results || results.length === 0) && (\n                <div className=\"info-message full-width-message\">\n                    Processing completed, but no valid files were found or processed.\n                </div>\n            )}\n\n\t\t\t{/* --- Loop through results for each file --- */} \n\t\t\t<div className=\"results-content-area\">\n                {results && results.length > 0 && results.map((fileResult, index) => {\n                    const jsonCopyKey = `json-${index}`;\n                    const rawCopyKey = `raw-${index}`;\n                    const currentJsonCopyText = copyStatus[jsonCopyKey] || 'Copy JSON';\n                    const currentRawCopyText = copyStatus[rawCopyKey] || 'Copy Raw Text';\n                    const isFileError = fileResult.status === 'error';\n                    const isJsonParseWarning = fileResult.status === 'success' && fileResult.error_message && fileResult.structured_output === null;\n\n                    let rawTitle = \"Response\";\n                    if (isJsonParseWarning) {\n                        rawTitle = \"Raw Output (JSON Parsing Failed)\";\n                    } else if (!fileResult.structured_output && fileResult.raw_output) {\n                        rawTitle = \"Response (Rendered as Markdown)\";\n                    } else if (fileResult.structured_output && fileResult.raw_output) {\n                        rawTitle = \"Raw Output (Fallback)\";\n                    }\n\n                    return (\n                        <section key={index} className={`result-section file-result-section ${isFileError ? 'file-error-section' : ''}`}>\n                            <h2 className=\"file-result-header\">File: {fileResult.file_name || `Item ${index + 1}`}</h2>\n\n                            {isFileError && fileResult.error_message && (\n                                <div className=\"error-message file-error-message\">\n                                    <strong>Error:</strong> {fileResult.error_message}\n                                </div>\n                            )}\n                             {isJsonParseWarning && fileResult.error_message && (\n                                <div className=\"warning-message file-error-message\">\n                                    <strong>Note:</strong> {fileResult.error_message}\n                                </div>\n                            )}\n\n                            {/* Structured Output for this file */}\n                            {fileResult.structured_output && (\n                                <div className=\"sub-result-section\">\n                                    <header className=\"section-header\">\n                                        <h3>Structured Output ({schema_used || 'N/A'})</h3>\n                                        <button\n                                            onClick={() => copyToClipboard(JSON.stringify(fileResult.structured_output, null, 2), 'json', index)}\n                                            className={`copy-button ${currentJsonCopyText !== 'Copy JSON' ? 'copied' : ''}`}\n                                            disabled={currentJsonCopyText !== 'Copy JSON'}\n                                        >\n                                            {currentJsonCopyText}\n                                        </button>\n                                    </header>\n                                    <div className=\"json-viewer-wrapper\">\n                                        <JsonViewer\n                                            value={fileResult.structured_output}\n                                            theme=\"vscode\" dark={true} indentWidth={2}\n                                            collapsed={false} enableClipboard={false}\n                                            displayDataTypes={false} displayObjectSize={true}\n                                        />\n                                    </div>\n                                </div>\n                            )}\n\n                            {/* Raw Output for this file */}\n                            {fileResult.raw_output && (\n                                <div className=\"sub-result-section\">\n                                    <header className=\"section-header\">\n                                        <h3>{rawTitle}</h3>\n                                         <button\n                                            onClick={() => copyToClipboard(fileResult.raw_output, 'raw', index)}\n                                            className={`copy-button ${currentRawCopyText !== 'Copy Raw Text' ? 'copied' : ''}`}\n                                            disabled={currentRawCopyText !== 'Copy Raw Text'}\n                                        >\n                                            {currentRawCopyText}\n                                        </button>\n                                    </header>\n                                    {!fileResult.structured_output ? (\n                                        <div className=\"markdown-content-wrapper\">\n                                            <ReactMarkdown remarkPlugins={[remarkGfm]}>{fileResult.raw_output}</ReactMarkdown>\n                                        </div>\n                                    ) : (\n                                        <pre className=\"raw-output-box-results\">{fileResult.raw_output}</pre>\n                                    )}\n                                </div>\n                            )}\n\n                             {fileResult.status === 'success' && !fileResult.raw_output && !fileResult.structured_output && (\n                                 <p><i>No output content generated for this file.</i></p>\n                             )}\n                        </section>\n                    )\n                })}\n\n\t\t\t\t{/* --- Overall Usage Statistics --- */} \n\t\t\t\t{overall_usage_metadata && (overallStatus === 'success' || overallStatus === 'partial_success') && (\n\t\t\t\t\t<section className=\"result-section usage-stats-results overall-usage\">\n\t\t\t\t\t\t<h3>Overall Usage Statistics</h3>\n\t\t\t\t\t\t<p><strong>Total Input Tokens:</strong> {overall_usage_metadata.prompt_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t\t<p><strong>Total Output Tokens:</strong> {overall_usage_metadata.candidates_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t\t<p><strong>Grand Total Tokens:</strong> {overall_usage_metadata.total_token_count?.toLocaleString() ?? 'N/A'}</p>\n\t\t\t\t\t</section>\n\t\t\t\t)}\n\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ResultsPage;\n"
  }

]
