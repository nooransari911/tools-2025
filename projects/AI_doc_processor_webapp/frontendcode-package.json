[
  {
    "file": "./backend/app/schemas/api_models.py",
    "content": "# ai_doc_processor_webapp/backend/app/schemas/api_models.py\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List, Dict, Any\n\n# --- Model for Overall Usage --- \nclass UsageMetadata(BaseModel):\n    \"\"\" Structure for aggregated token usage information. \"\"\"\n    prompt_token_count: int = 0\n    candidates_token_count: int = 0\n    total_token_count: int = 0\n\n# --- Model for a Single File's Result --- \n# ** ADDED MISSING MODEL DEFINITION **\nclass SingleFileResult(BaseModel):\n    \"\"\" Structure for the result of processing a single file. \"\"\"\n    file_name: str\n    status: str = \"success\" # 'success' or 'error'\n    raw_output: Optional[str] = None\n    structured_output: Optional[Any] = None\n    error_message: Optional[str] = None\n    # Per-file usage could be added here if needed later\n    # usage_metadata: Optional[UsageMetadata] = None \n\n# --- Model for the Overall API Response (for Multi-File) --- \nclass ProcessResponse(BaseModel):\n    \"\"\" Structure for the final response from the /process endpoint. \"\"\"\n    status: str = \"success\" # 'success', 'error', 'partial_success'\n    overall_error_message: Optional[str] = None\n    results: List[SingleFileResult] = [] # List of results for each file\n    schema_used: Optional[str] = None\n    overall_usage_metadata: Optional[UsageMetadata] = None\n\n# --- Model for Schema List Response --- \nclass SchemaListResponse(BaseModel):\n    \"\"\" Response structure for the /schemas endpoint. \"\"\"\n    schemas: List[str]\n\n# --- Optional: Model for Form Fields (if using Depends) ---\n# Kept here for potential future use, though not currently used by main.py\nclass ProcessForm(BaseModel):\n    \"\"\" Defines the expected form fields if using Depends(). \"\"\"\n    prompt: str = Field(..., description=\"Instructions for processing.\")\n    schema_name: str = Field(..., description=\"Schema name or '(No Schema - Plain Text)'.\")\n    model_type: str = Field(..., description=\"Model type ('pro' or 'flash').\")\n    api_key_type: str = Field(..., description=\"API key type ('free' or 'paid').\")\n"
  }
]
